<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_Player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>s_Player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
*   Variables
*   All the variables for the character are stored here
*   Author: Matt Jones
*/

//Player Variables
hSpeed = 0; //Horizontal Speed
vSpeed = 0; //Vertical Speed 
grav = 0.3; //Gravity
walkSpeed = 4; //Movement Speed
jumpSpeed = 7; //Jump Speed
jumps = 0; //How many jumps
jumpsmax = 2; //Maximum jumps
ladder = false;

if (global.checkpointR == room)
{
    x = global.checkpointx;
    y = global.checkpointy;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
    Main Game Player Logic 
    Controls all the games logic.
    Author: Matt Jones
*/

//Keyboard Key Checks
key_up = keyboard_check(vk_up) || (gamepad_button_check(0,gp_padu));
key_down = keyboard_check(vk_down) || (gamepad_button_check(0,gp_padd));
key_left = keyboard_check(vk_left) || keyboard_check(ord('A')) || (gamepad_button_check(0,gp_padl));
key_right = keyboard_check(vk_right) || keyboard_check(ord('D')) || (gamepad_button_check(0,gp_padr));
key_crouch = keyboard_check(vk_down);
key_jump = keyboard_check_pressed(vk_space) || (gamepad_button_check_pressed(0,gp_face1));
key_debugReset = keyboard_check_pressed(ord('R')) || gamepad_button_check_pressed(0,gp_shoulderl);

//Variables
var move = key_right - key_left;

hSpeed = move * walkSpeed;
vSpeed = vSpeed + grav;

//Jumping and Double Jumping
if (place_meeting(x,y+1,o_Wall)) // Initialize the Max amount of jumps.
{
    jumps = jumpsmax;
}

if (key_jump) &amp;&amp; (jumps &gt; 0)
{
    jumps -= 1; //Jumps max = 2 so add one jump each time pressed
    vSpeed = -jumpSpeed; //Set the vertical speed negative to the jumpSpeed
    audio_play_sound(snd_Jump,10,false); //Play Jump Sound.
}
//Wall Jumping
if (key_jump) &amp;&amp; (place_meeting(x+1,y,o_Wall))
{
    vSpeed = -jumpSpeed
    //audio_play_sound(snd_Jump,10,false);
}

//Ladder Climbing
if (key_up) || (key_down)
{
    if (place_meeting(x,y,o_Ladder)) ladder = true;
}

if (ladder)
{
    vSpeed = 0;
    if (key_up) vSpeed = -2;
    if (key_down) vSpeed = 2;
    if (place_meeting(x,y,o_Ladder)) ladder = false;
    if (key_jump) ladder = false;
}

if (key_jump) &amp;&amp; (place_meeting(x-1,y,o_Wall))
{
    vSpeed = -jumpSpeed
    //audio_play_sound(snd_Jump,10,false);
}

// Horizontal Move Speed
if (place_meeting(x+hSpeed, y, o_Wall))
{
    while(!place_meeting(x+sign(hSpeed), y, o_Wall))
    {
        x = x + sign(hSpeed);
    }
    hSpeed = 0;
}

// Vertical Move Speed
if (place_meeting(x,y+vSpeed,o_Wall))
{
    while(!place_meeting(x, y+sign(vSpeed),o_Wall))
    {
        y = y + sign(vSpeed);
    }
    vSpeed = 0;
}

x = x + hSpeed;
y = y + vSpeed;

//Animation
if(!place_meeting(x,y+1,o_Wall)) //If the player jumps then run Jump Animation
{
    sprite_index = s_PlayerA;
    image_speed = 0;
    
    if (sign(vSpeed) &gt; 0) image_index = 1; else image_index = 0; //Else original state
}
else
{
    image_speed = 0.8
    if (hSpeed == 0)
    {
        sprite_index = s_Player;
    }
    else
    {
        sprite_index = s_PlayerR;
    }
}

if (key_up)
{
    image_speed = 1;
    if(place_meeting(x,y,o_Ladder))
    {
        sprite_index = s_PlayerL;
    }
}

if (hSpeed != 0) image_xscale = sign(hSpeed); //Flip the player according to the direction

//Gamepad Debug Resetting
if (key_debugReset)
{
    game_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
